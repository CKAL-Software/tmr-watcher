{"version":3,"sources":["definitions.ts","storage.ts","util.ts","promptLogin.ts","credentialsHandler.ts","index.ts"],"names":[],"mappings":"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","file":"bundle.js","sourceRoot":"../src","sourcesContent":["export const CREDENTIALS_KEY = \"credentials\";\nexport const AWS_CLIENT_ID = \"6nki0f24aj9hrvluekbmkea631\";\nexport const BUCKET_URL =\n  \"https://trackmania-registry.s3.eu-west-1.amazonaws.com\";\n\nexport interface Ghost {\n  time: number;\n  fileName: string;\n  lastUpdated: number;\n}\n\nexport interface Track {\n  name: string;\n  records: Record<string, Ghost>;\n  lastUpdated?: number;\n  fileName?: string;\n  excluded: boolean;\n  diff?: { ms: number; percentage: number };\n}\n","import fs from \"fs\";\n\nexport const STORAGE_FILE = \"tmr.json\";\n\nexport function store(key: string, value: unknown) {\n  const storage = read();\n  storage[key] = value;\n  fs.writeFileSync(STORAGE_FILE, JSON.stringify(storage));\n}\n\nexport function load(key: string) {\n  return read()[key];\n}\n\nfunction read() {\n  try {\n    return JSON.parse(fs.readFileSync(STORAGE_FILE).toString());\n  } catch {\n    fs.writeFileSync(STORAGE_FILE, JSON.stringify({}));\n    return {};\n  }\n}\n","import readlineSync from \"readline-sync\";\nimport fetch from \"node-fetch\";\nimport fs from \"fs\";\nimport stream from \"stream\";\nimport { promisify } from \"util\";\nimport { BUCKET_URL } from \"./definitions\";\nimport path from \"path\";\n\nexport function msToLaptime(msIn: number | undefined) {\n  if (msIn === undefined) {\n    return \"\";\n  }\n\n  const ms = Math.abs(msIn);\n\n  if (ms < 1000) {\n    return (\n      (msIn < 0 ? \"-\" : \"\") +\n      `00:${Math.round(ms / 10)\n        .toString()\n        .padStart(2, \"0\")}`\n    );\n  }\n\n  const mins = Math.floor(ms / 60000);\n  const secs = Math.floor((ms % 60000) / 1000);\n  const thousands = ms % 1000;\n\n  if (isNaN(ms) || isNaN(mins) || isNaN(secs) || isNaN(thousands)) {\n    return \"\";\n  }\n\n  return (\n    (msIn < 0 ? \"-\" : \"\") +\n    `${mins ? mins + \":\" : \"\"}${secs\n      .toString()\n      .padStart(mins > 0 ? 2 : 0, \"0\")}:${Math.floor(thousands / 10)\n      .toString()\n      .padStart(2, \"0\")}`\n  );\n}\n\nexport async function downloadFile(fileName: string, targetFolder: string) {\n  const pipeline = promisify(stream.pipeline);\n\n  const response = await fetch(`${BUCKET_URL}/ghosts/${fileName}`);\n\n  if (!response.ok) {\n    throw new Error(`unexpected response ${response.statusText}`);\n  }\n\n  await pipeline(\n    response.body,\n    fs.createWriteStream(path.join(targetFolder, fileName.replace(\"<>\", \"__\")))\n  );\n}\n\nexport function question(query: string, mask?: boolean): string {\n  return readlineSync.question(\n    query,\n    mask ? { hideEchoBack: true, mask: \"*\" } : undefined\n  );\n}\n","import { question } from \"./util\";\n\nexport async function getEmailPassword() {\n  const email = question(\"CKAL email: \");\n  const password = question(\"Password: \", true);\n\n  return { email, password };\n}\n","import { CognitoIdentityProvider } from \"@aws-sdk/client-cognito-identity-provider\";\nimport { AWS_CLIENT_ID, CREDENTIALS_KEY } from \"./definitions\";\nimport { Credentials } from \"./models\";\nimport { load, store } from \"./storage\";\nimport { getEmailPassword } from \"./promptLogin\";\nconst Cognito = new CognitoIdentityProvider({ region: \"eu-west-1\" });\n\nexport function logout() {\n  store(CREDENTIALS_KEY, undefined);\n}\n\nexport async function login() {\n  const { email, password } = await getEmailPassword();\n\n  try {\n    const response = await Cognito.initiateAuth({\n      AuthFlow: \"USER_PASSWORD_AUTH\",\n      ClientId: AWS_CLIENT_ID,\n      AuthParameters: {\n        USERNAME: email.replaceAll(\" \", \"\"),\n        PASSWORD: password,\n      },\n    });\n\n    if (!response.AuthenticationResult) {\n      console.log(\"An error occurred\");\n      return;\n    }\n\n    store(CREDENTIALS_KEY, {\n      ...response.AuthenticationResult,\n      ExpirationTimestamp: Math.round(\n        new Date().getTime() / 1000 + response.AuthenticationResult.ExpiresIn!\n      ),\n    });\n  } catch {\n    console.log(\"Invalid login, try again\");\n    await login();\n    return;\n  }\n}\n\nexport async function getAccessToken(): Promise<string> {\n  try {\n    let credentials: Credentials | null;\n\n    credentials = load(CREDENTIALS_KEY);\n\n    if (!credentials) {\n      console.log(\"Missing credentials\");\n      throw new Error();\n    }\n\n    if (isAccessTokenOld(credentials)) {\n      try {\n        credentials = await refreshCredentials(credentials.RefreshToken!);\n        store(CREDENTIALS_KEY, credentials);\n      } catch (error) {\n        console.log(error);\n        throw new Error();\n      }\n    }\n\n    return credentials.AccessToken + \"\";\n  } catch {\n    await login();\n    return getAccessToken();\n  }\n}\n\nexport async function refreshCredentials(\n  refreshToken: string\n): Promise<Credentials> {\n  const response = await Cognito.initiateAuth({\n    AuthFlow: \"REFRESH_TOKEN\",\n    ClientId: AWS_CLIENT_ID,\n    AuthParameters: {\n      REFRESH_TOKEN: refreshToken,\n    },\n  });\n\n  if (!response.AuthenticationResult) {\n    throw new Error();\n  }\n\n  return {\n    ...response.AuthenticationResult,\n    RefreshToken: refreshToken,\n    ExpirationTimestamp: Math.round(\n      new Date().getTime() / 1000 + response.AuthenticationResult.ExpiresIn!\n    ),\n  };\n}\n\nexport function isAccessTokenOld(credentials: Credentials) {\n  return credentials.ExpirationTimestamp - new Date().getTime() / 1000 < 300;\n}\n\nexport async function clearCredentials() {\n  store(CREDENTIALS_KEY, \"\");\n}\n","import fetch from \"node-fetch\";\nimport { getAccessToken, login, logout } from \"./credentialsHandler\";\nimport { downloadFile, question } from \"./util\";\nimport FormData from \"form-data\";\nimport fs from \"fs\";\nimport { String } from \"aws-sdk/clients/batch\";\nimport { Track } from \"./definitions\";\nimport path from \"path\";\n\nconst register: Record<string, number> = {};\nconst targetFolder = \"..\";\n\n(async () => {\n  const { version } = JSON.parse(fs.readFileSync(\"package.json\").toString());\n\n  console.log(`Running TrackMania Registry watcher v${version}`);\n\n  // make sure accesstoken is fresh\n  await getAccessToken();\n\n  console.log();\n  console.log(`Watching for file changes...`);\n\n  fs.watch(targetFolder, (_event, filename) => {\n    if (!filename?.includes(\".Replay.gbx\")) {\n      return;\n    }\n\n    const modified = fs.statSync(path.join(targetFolder, filename)).mtimeMs;\n\n    if (filename && (!register[filename] || register[filename] < modified)) {\n      register[filename] = modified;\n      uploadGhostIfFaster(path.join(targetFolder, filename));\n    }\n  });\n\n  while (true) {\n    console.log();\n    const input = question(\"(E)xit, (S)ync, (C)lean up, (L)og out: \");\n    if (input.toLowerCase() === \"e\") {\n      process.exit();\n    } else if (input.toLowerCase() === \"s\") {\n      await synchronize();\n    } else if (input.toLowerCase() === \"c\") {\n      cleanUp();\n    } else if (input.toLowerCase() === \"l\") {\n      logout();\n      console.log(\"Logged out...\");\n      await login();\n    } else {\n      console.log(\"Input not recognized\");\n    }\n  }\n})();\n\nfunction cleanUp() {\n  const ghosts = fs\n    .readdirSync(targetFolder)\n    .filter((name) => name.includes(\".Replay.gbx\"));\n\n  const trackToTime: Record<string, { time: number; fileName: string }> = {};\n  const ghostsToCleanup: string[] = [];\n\n  ghosts.forEach((g) => {\n    const [base] = g.split(\".\");\n    const [rest, time] = base.split(\"__\");\n\n    if (trackToTime[rest] && trackToTime[rest].time < Number(time)) {\n      ghostsToCleanup.push(g);\n    } else {\n      trackToTime[rest] = { time: Number(time), fileName: g };\n    }\n  });\n\n  if (ghostsToCleanup.length === 0) {\n    console.log(\"Nothing to clean up\");\n  } else {\n    console.log(\n      `${ghostsToCleanup.length} ghost${\n        ghostsToCleanup.length === 1 ? \"\" : \"s\"\n      } can be deleted:`\n    );\n    ghostsToCleanup.forEach((g) => console.log(`- ${g}`));\n    const answer = question(\"Delete now? (Y/n): \");\n\n    if (answer.toLowerCase() === \"y\" || answer === \"\") {\n      ghostsToCleanup.forEach((g) => fs.rmSync(path.join(targetFolder, g)));\n    }\n    console.log(\n      `Deleted ${ghostsToCleanup.length} ghost${\n        ghostsToCleanup.length === 1 ? \"\" : \"s\"\n      }`\n    );\n  }\n}\n\nasync function synchronize() {\n  const [playerNameResult, tracksResult] = await Promise.all([\n    fetch(\"https://api.ckal.dk/tmr/username\", {\n      headers: { Authorization: await getAccessToken() },\n    }),\n    fetch(\"https://api.ckal.dk/tmr/tracks\", {\n      headers: { Authorization: await getAccessToken() },\n    }),\n  ]);\n\n  if (!playerNameResult.ok || !tracksResult.ok) {\n    console.log(\"An error occurred\");\n    return;\n  }\n\n  const tracks: Track[] = await tracksResult.json();\n  const playerName: string = (await playerNameResult.json()).username;\n\n  const otherGhosts: string[] = [];\n\n  tracks.forEach((t) => {\n    Object.entries(t.records)\n      .filter(([name]) => name !== playerName)\n      .forEach(([, ghost]) =>\n        otherGhosts.push(ghost.fileName.replace(\"<>\", \"__\").split(\"/\")[1])\n      );\n  });\n\n  const existingGhosts = fs\n    .readdirSync(targetFolder)\n    .filter((name) => name.includes(\".Replay.gbx\"));\n\n  const ghostsToDownload = otherGhosts.filter(\n    (g) => !existingGhosts.includes(g)\n  );\n\n  if (ghostsToDownload.length === 0) {\n    console.log(\"No new ghosts\");\n    return;\n  }\n\n  const answer = question(\n    `${ghostsToDownload.length} new ghost${\n      ghostsToDownload.length === 1 ? \"\" : \"s\"\n    }. Download now? (Y/n): `\n  );\n\n  if (answer.toLowerCase() === \"y\" || answer === \"\") {\n    console.log(\n      `Downloading new ghost${ghostsToDownload.length === 1 ? \"\" : \"s\"}...`\n    );\n    await Promise.all(\n      ghostsToDownload.map(async (ghost) => {\n        register[ghost] = Date.now() + 30 * 1000;\n        await downloadFile(ghost.replace(\"__\", \"<>\"), targetFolder);\n        console.log(`Downloaded ghost on ${ghost.split(\"_\")[1]}`);\n      })\n    );\n  }\n\n  cleanUp();\n}\n\nasync function uploadGhostIfFaster(filename: string) {\n  if (!filename.includes(\".Replay.gbx\")) {\n    throw new Error(`Tried to upload ${filename} but is not a ghost file`);\n  }\n\n  const file = fs.readFileSync(filename, \"utf-8\");\n\n  await handleUpload(file);\n}\n\nasync function handleUpload(fileName: String) {\n  console.log(`Attempting to upload ${fileName}`);\n\n  const formData = new FormData();\n  formData.append(\"file\", fs.createReadStream(fileName));\n\n  const result = await fetch(\"https://api.ckal.dk/tmr/upload\", {\n    method: \"POST\",\n    headers: {\n      Authorization: await getAccessToken(),\n      ...formData.getHeaders(),\n    },\n    body: formData,\n  });\n\n  if (!result.ok) {\n    console.log(result.status, await result.text());\n    return;\n  }\n\n  console.log(result.ok);\n  console.log(`Updated ghost ${fileName}'`);\n}\n"]}